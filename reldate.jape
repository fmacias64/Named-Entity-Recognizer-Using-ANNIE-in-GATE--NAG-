/*
*  reltime.jape
*
* Copyright (c) 1998-2004, The University of Sheffield.
*
*  This file is part of GATE (see http://gate.ac.uk/), and is free
*  software, licenced under the GNU Library General Public License,
*  Version 2, June 1991 (in the distribution as file licence.html,
*  and also available at http://gate.ac.uk/gate/licence.html).
*
*  Diana Maynard, 10 Sep 2001
* 
*  $Id: reldate.jape 13105 2010-09-29 15:04:49Z dgmaynard $
*/
Imports: { 
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
}
// this file must follow time.jape
// handles relative time sequences

Phase:	Name
Input: Token Lookup TempDate
Options: control = appelt

Rule: GazDateWords
Priority: 10
// yesterday evening

(
 {Lookup.majorType == date_key}
 (
  {Lookup.majorType == time_unit}
 )?
)
:date -->
  :date.TempDate = {rule = "GazDateWords"}


Rule: TimeAgo
Priority:30
// 2 hours ago

(
 {Token.kind == number}
 ({Lookup.majorType == time_unit})
 ({Token.string == "ago"} | {Token.string == "AGO"})
)
:date -->
 :date.TempDate = {rule = "TimeAgo"}


Rule: DateAgo
Priority:30
// 2 weeks ago

(
 ({Lookup.majorType == number}|{Token.kind == number}) :number
 ({Lookup.majorType == date_unit}):unit
 ({Token.string == "ago"} | {Token.string == "AGO"})
)
:date -->
// :date.TempDate = {rule = "TimeAgo"}
{
		int start_offset=0;
		int end_offset = 0;
		int totalOffset = 0;
		int numInt = 1;
		int dirInt = -1;
		Date dateX;
		String dirStr = "";
		String numStr = "";
		Calendar calendar;
		calendar = Calendar.getInstance();
		gate.FeatureMap features = Factory.newFeatureMap();
		gate.AnnotationSet date = (gate.AnnotationSet) bindings.get("date");
		gate.AnnotationSet num = (gate.AnnotationSet) bindings.get("number");
		if (num != null) {
			gate.Annotation  Anum = (gate.Annotation)num.iterator().next();
			start_offset = Anum.getStartNode().getOffset().intValue();
			end_offset = Anum.getEndNode().getOffset().intValue();
			if (Anum.getFeatures().get("int") != null) {
				numStr = Anum.getFeatures().get("int").toString();
		//		System.out.println("numStr int " + numStr);
			} else {
				numStr = doc.getContent().toString().substring(start_offset, end_offset);
			}
			if (numStr != null) {
				numInt = Integer.parseInt(numStr.trim());
		//		System.out.println("numInt " + Integer.toString(numInt));
			} else {
				numInt = 1;
			}
		}
	
		gate.AnnotationSet unit = (gate.AnnotationSet) bindings.get("unit");
		gate.Annotation  Aunit = (gate.Annotation)unit.iterator().next();
		start_offset = Aunit.getStartNode().getOffset().intValue();
		end_offset = Aunit.getEndNode().getOffset().intValue();
		String unitStr = "";
		//System.out.println("unitStr " +unitStr);
		int unitInt = 0;
		if (Aunit.getFeatures().get("day") != null) {
			unitStr = Aunit.getFeatures().get("day").toString();
		//	System.out.println("unitStr int " + unitStr);
		} else {
			unitStr = doc.getContent().toString().substring(start_offset, end_offset);
		}
		if (unitStr != null) {
			unitInt = Integer.parseInt(unitStr.trim());
		//	System.out.println("unitInt " + Integer.toString(unitInt));
		} else {
			unitInt = 1;
		}
		if (numInt > 0) {
			totalOffset = (numInt * unitInt);
		} else {
			totalOffset = unitInt;
		}
		totalOffset *= dirInt;
		//System.out.println("totalOffset " + Integer.toString(totalOffset));
		SimpleDateFormat df = new SimpleDateFormat("MM dd yyyy");
		//System.out.println("Doc date " + doc.getFeatures().get("docDate").toString());
		try {
			dateX = df.parse(doc.getFeatures().get("docDate").toString());
		//	System.out.println("yes1 ");
			calendar.setTime(dateX);
	    		calendar.add(Calendar.DATE, totalOffset);
			features.put("rule","DateAgo");
			String monthX =  Integer.toString(calendar.get(Calendar.MONTH) + 1);
			String dayX = Integer.toString(calendar.get(Calendar.DATE));
			String yearX = Integer.toString(calendar.get(Calendar.YEAR));
		//	System.out.println(monthX + " " + dayX + " " + yearX);
			dateX = df.parse(monthX + " " + dayX + " " + yearX);
			features.put("computedDate",df.format(dateX));
		//	System.out.println("AS " + dirStr + " " + numStr + " " + unitStr);
			outputAS.add(date.firstNode(), date.lastNode(), "TempDate",features);
		} catch (ParseException e) {
		}

 }

Rule: ModifierDate
Priority: 30
// last year
// next 10 years. next is the mod, 10 is the number, years is the unit

(
 ({Lookup.majorType == time_modifier}) :mod
  ({Lookup.majorType == number}|{Token.kind == number})?:number
 ({Lookup.majorType == date_unit}) :unit
) :date
-->
//:date.TempDate = {rule = "ModifierDate"}
{
	if (doc.getFeatures().get("docDate") == null) {
		return;
	}
	int start_offset=0;
	int end_offset = 0;
	int totalOffset = 0;
	int numInt = 1;
	int dirInt = 1;
	Date dateX;
	String dirStr = "";
	String numStr = "";
	String featStr = "computedDate";
	Calendar calendar;
	calendar = Calendar.getInstance();
	gate.FeatureMap features = Factory.newFeatureMap();
	gate.AnnotationSet date = (gate.AnnotationSet) bindings.get("date");
	//mod is something like last or next. Use this to determine direction.
	gate.AnnotationSet mod = (gate.AnnotationSet) bindings.get("mod");
	gate.Annotation  Amod = (gate.Annotation)mod.iterator().next();
	start_offset = Amod.getStartNode().getOffset().intValue();
	end_offset = Amod.getEndNode().getOffset().intValue();
	String modStr = doc.getContent().toString().substring(start_offset, end_offset);
	//System.out.println("modStr " + modStr);
	//get the direction. dir = direction, plus or minus, 1, -1. This is a feature in the gazetteer file.
	if (Amod.getFeatures().get("dir") != null) {
		dirStr = Amod.getFeatures().get("dir").toString();
	}
	if (dirStr != null) {
		dirInt = Integer.parseInt(dirStr.trim());
	} else {
		dirInt = 1;
	}
	//System.out.println("dirInt " + Integer.toString(dirInt)); //if dirInt = 1, then reldate will be in the future, if -1, then it will be in the past

	//number is how many units we have to deal with, "next seven weeks" 
	gate.AnnotationSet num = (gate.AnnotationSet) bindings.get("number");
	if (num != null) {
		gate.Annotation  Anum = (gate.Annotation)num.iterator().next();
		start_offset = Anum.getStartNode().getOffset().intValue();
		end_offset = Anum.getEndNode().getOffset().intValue();
		if (Anum.getFeatures().get("int") != null) {
			numStr = Anum.getFeatures().get("int").toString();
		} else {
			numStr = doc.getContent().toString().substring(start_offset, end_offset);
		}
		if (numStr != null) {
			numInt = Integer.parseInt(numStr.trim());
		} else {
			numInt = 1;
		}
	} else {
		numInt = 1;
	}
	//System.out.println("numInt " + Integer.toString(numInt));
	//unit is days, months, years, etc.
	gate.AnnotationSet unit = (gate.AnnotationSet) bindings.get("unit");
	gate.Annotation  Aunit = (gate.Annotation)unit.iterator().next();
	start_offset = Aunit.getStartNode().getOffset().intValue();
	end_offset = Aunit.getEndNode().getOffset().intValue();
	String unitStr = "";
	int unitInt = 0;

	if (num != null) {
		if (Aunit.getFeatures().get("day") != null) {
			unitStr = Aunit.getFeatures().get("day").toString();
		} else {
			unitStr = "1";
		}
	} else {
		//dayspl: This section lets you handle something like: "in the upcoming weeks". dayspl is a feature that turns that ambiguity into a number.
		if (Aunit.getFeatures().get("dayspl") != null) {
			unitStr = Aunit.getFeatures().get("dayspl").toString();
		} else {
			unitStr = "1";
		}
	}

	if (unitStr != null) {
		try {
			unitInt = Integer.parseInt(unitStr.trim());
		} catch (NumberFormatException e) {
			unitInt = 0;
		}
	} else {
		unitInt = 1;
	}
	//System.out.println("unitInt " + Integer.toString(unitInt));

	if (numInt > 0) {
		totalOffset = (numInt * unitInt);
	} else {
		totalOffset = unitInt;
	}

	totalOffset *= dirInt;
	if (dirInt < 0) {
		featStr = "startDate";
	} else {
		featStr = "endDate";
	}
	//System.out.println("totalOffset " + Integer.toString(totalOffset));
	SimpleDateFormat df = new SimpleDateFormat("MM dd yyyy");
	//System.out.println("Doc date " + doc.getFeatures().get("docDate").toString());
	try {
		dateX = df.parse(doc.getFeatures().get("docDate").toString());
		//System.out.println("yes1 ");
		calendar.setTime(dateX);
		calendar.add(Calendar.DATE, totalOffset);
		features.put("rule","ModifierDate");
		String monthX =  Integer.toString(calendar.get(Calendar.MONTH) + 1);
		String dayX = Integer.toString(calendar.get(Calendar.DATE));
		String yearX = Integer.toString(calendar.get(Calendar.YEAR));
		//System.out.println(monthX + " " + dayX + " " + yearX);
		dateX = df.parse(monthX + " " + dayX + " " + yearX);
		features.put(featStr,df.format(dateX));
		//System.out.println("AS " + modStr + " " + dirStr + " " + numStr + " " + unitStr);
		outputAS.add(date.firstNode(), date.lastNode(), "TempDate",features);
	} catch (ParseException e) {
	}
 }


Rule: ModifierNamedDate
Priority: 30
// last October
// next Tuesday

(
 {Lookup.majorType == time_modifier} 
 ({Lookup.minorType == month}|
  {Lookup.minorType == day}
 )
)
:date -->
 :date.TempDate = {rule = "ModifierNamedDate"}


Rule: EarlyDate
// early in 2002
// in early 2002

(
 ({Token.string == "early"}|
 {Token.string == "EARLY"}|
 {Token.string == "mid"}|
 {Token.string == "MID"}|
 {Token.string == "late"}|
  {Token.string == "LATE"}
 )
 (
 	({Token.string == "in"} | {Token.string == "IN"})
 )?
 ({TempDate}|
  (
   {Lookup.majorType == time_modifier} 
   {Lookup.majorType == date_unit}
  )
 )
)
:date
-->
 {
//removes TempDate annotation, gets the rule feature and adds a new TempDate annotation
gate.AnnotationSet date = (gate.AnnotationSet)bindings.get("date");
gate.Annotation dateAnn = (gate.Annotation)date.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", dateAnn.getFeatures().get("rule"));
features.put("rule2", "EarlyDate");
outputAS.add(date.firstNode(), date.lastNode(), "TempDate",features);
outputAS.removeAll(date);
}
 
Rule:FiscalDate
// first half of next year
// first nine months of the financial year 

(
 {Lookup.minorType == ordinal}
 (
  ({Lookup.majorType == number}|
   {Token.kind == number}
  )
 )?
 {Lookup.majorType == date_unit}
 
 (
 	({Token.string == "of"} | {Token.string == "OF"})
 )?
 ((
   {Token.category == DT}|
   {Token.category == "PRP$"}
  )
 )?
 ({Lookup.majorType == time_modifier} 
 )?
 {Lookup.majorType == date_unit}
)
:date -->
  :date.TempDate = {rule = FiscalDate}

//[the] quarter to [date]









