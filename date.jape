/*
*  time.jape
*
* Copyright (c) 1998-2004, The University of Sheffield.
*
*  This file is part of GATE (see http://gate.ac.uk/), and is free
*  software, licenced under the GNU Library General Public License,
*  Version 2, June 1991 (in the distribution as file licence.html,
*  and also available at http://gate.ac.uk/gate/licence.html).
*
*  Diana Maynard, 10 Sep 2001
* 
*  $Id: date.jape 12268 2010-02-16 13:26:12Z markagreenwood $
*/
Imports: { 
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.text.ParseException;
}

Phase:	Time
Input: Token Lookup
Options: control = appelt


/////////////////////////////////////////////////

Macro: DAY_NAME 
({Lookup.minorType == day })

Macro: ONE_DIGIT
({Token.kind == number, Token.length == "1"})

Macro: TWO_DIGIT
({Token.kind == number, Token.length == "2"})

Macro: FOUR_DIGIT
({Token.kind == number, Token.length == "4"})

Macro: DAY_MONTH_NUM
(ONE_DIGIT | TWO_DIGIT)

Macro: DATE_PRE
// possible modifiers of dates, eg. "early October"
({Token.string == "early"}|
 {Token.string == "late"}|
 {Token.string == "mid"}|
 {Token.string == "mid-"}|
 {Token.string == "end"} | 
 {Token.string == "EARLY"}|
  {Token.string == "LATE"}|
  {Token.string == "MID"}|
  {Token.string == "MID-"}|
 {Token.string == "END"}
)

Macro: DAY 
(((DATE_PRE)?
  DAY_NAME) |
 DAY_MONTH_NUM)

Macro: MONTH_NAME
( (DATE_PRE)?
  {Lookup.minorType == month})

Macro: MONTH 
(MONTH_NAME | DAY_MONTH_NUM)

Macro: SLASH
  ({Token.string == "/"})
  
Macro: DASH
  {Token.string == "-"}

Macro: OF
  ({Token.string == "of"} | {Token.string == "OF"})

Macro: AD_BC
	(  {Token.string == "ad"} | {Token.string == "AD"}
	|
	  ({Token.string == "a"} {Token.string == "."}
	   {Token.string == "d"} {Token.string == "."})
	|
	  ({Token.string == "A"} {Token.string == "."}
	   {Token.string == "D"} {Token.string == "."})
	|

	  {Token.string == "bc"} | {Token.string == "BC"}
	|
	  ({Token.string == "b"} {Token.string == "."}
	   {Token.string == "c"} {Token.string == "."})
	 
	|
 	  ({Token.string == "B"} {Token.string == "."}
	   {Token.string == "C"} {Token.string == "."})
	)

Macro: YEAR
(        
 {Lookup.majorType == year}|
 TWO_DIGIT | FOUR_DIGIT | 
 {Token.string == "'"}
 (TWO_DIGIT)
)


Macro:	XDAY
(
 ({Token.orth == upperInitial}
 {Token.string == "Day"}) |
 ({Token.orth == allCaps}
 {Token.string == "DAY"})
)

Macro: ORDINAL
(
   ({Token.string ==~ "[0-9][0-9]?(th|rd|nd|st|TH|RD|ND|ST)"}
    |
   {Lookup.minorType == ordinal})
   (
    {Token.string == "of"} | {Token.string == "OF"}
    )?
)

Macro: NUM_OR_ORDINAL
  (ORDINAL | DAY_MONTH_NUM)


Macro: COMMA
({Token.string == ","})


Macro:  TIME_ZONE
(({Lookup.minorType == zone})|
 ({Token.string == "("}
  {Lookup.minorType == zone}
  {Token.string == ")"})
)

Macro: TIME_DIFF
(
 ({Token.string == "+"}|{Token.string == "-"})
 (FOUR_DIGIT)
)

Macro: TIME_AMPM
(
 {Lookup.minorType == ampm}
)




///////////////////////////////////////////////////////////////
// Time Rules 

Rule: TimeDigital1
// 20:14:25
(
 (ONE_DIGIT|TWO_DIGIT){Token.string == ":"} TWO_DIGIT 
({Token.string == ":"} TWO_DIGIT)?
(TIME_AMPM)?	
(TIME_DIFF)?
(TIME_ZONE)? 
)
:time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigital1"}


Rule:	TimeDigital2

// 8:14 am
// 4.34 pm
// 6am

(
 (ONE_DIGIT|TWO_DIGIT) 
 (({Token.string == ":"}|{Token.string == "."} |{Token.string == "-"} )
  TWO_DIGIT)?
 (TIME_AMPM)
 (TIME_ZONE)?
)
:time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigital"}


Rule: TimeOClock
// ten o'clock

(
(
 {Lookup.minorType == hour}
 {Token.string == "o"}
 {Token.string == "'"}
 {Token.string == "clock"}
 ) |
 (
  {Lookup.minorType == hour}
  {Token.string == "O"}
  {Token.string == "'"}
  {Token.string == "CLOCK"}
 )
)
:time 
-->
 :time.TempTime = {kind = "positive", rule = "TimeOClock"}

 
Rule: TimeAnalogue
// half past ten
// ten to twelve
// twenty six minutes to twelve

(
 (((({Lookup.majorType == number})?
    {Lookup.majorType == number}
   )
   ({Token.string == "minutes"} | {Token.string == "MINUTES"})
  ) |
  (({Token.string == "half"} | 
   {Token.string == "quarter"}) |
   ({Token.string == "HALF"} | 
   {Token.string == "QUARTER"})
   )
 )
 ({Token.string == "past"}|
 {Token.string == "PAST"}|
 {Token.string == "to"}|
  {Token.string == "TO"})
 {Lookup.minorType == hour}
)
:time 
-->
 :time.TempTime = {kind = "positive", rule = "TimeAnalogue"}


Rule: TimeWordsContext
Priority: 50
// seven thirty tomorrow

(
 {Lookup.majorType == number}
 (
  {Lookup.majorType == number}
 )?
):time1
(
 {Lookup.minorType == time_key}
) 
-->
:time1.TempTime = {kind = "positive", rule = "TimeWordsContext"}


Rule: TimeWords

(
 {Lookup.majorType == number}
 (
  {Lookup.majorType == number}
 )?
)
:time
-->
  :time.TempTime = {kind = "timeWords", rule = "TimeWords"}

  


Rule: TimeDigitalContext1

(
(FOUR_DIGIT)
):time
{Lookup.minorType == time_key}
 -->
 :time.TempTime = {kind = "positive", rule = "TimeDigitalContext"}

Rule: NotTimeDigitalContext2
Priority: 100
// prevent things like "at 0.61 km/h"

(
 {Token.string == "at"}
)
({Token.string == "0"}
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 (TIME_AMPM)?
 (TIME_ZONE)?
)
:time
 -->
 :time.Temp = {rule = "NotTimeDigitalContext2"}


Rule: TimeDigitalContext2

(
 {Token.string == "at"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
 (TIME_AMPM)?
 (TIME_ZONE)?
)
:time
 -->
 :time.TempTime = {kind = "positive", rule = "TimeDigitalContext2"}

Rule: TimeDigitalTemp1

(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
)
:time
 -->
 :time.TempTime = {kind = "temp", rule = "TimeDigitalTemp"}

Rule: TimeDigitalContext1
(
 {Token.string == "in"}
)?
((ONE_DIGIT|TWO_DIGIT)
 ({Token.string == ":"}|{Token.string == "."})
 TWO_DIGIT
 ({Token.string == "seconds"}|
 {Token.string == "SECONDS"}|
  {Token.string == "minutes"}|
  {Token.string == "MINUTES"}|
  {Token.string == "hours"}|
  {Token.string == "HOURS"}
 )
):time
-->
:time.TempTime = {kind = "positive", rule = "TimeDigitalContext1"}



Rule: TimeDigitalContextConj

(
 {Token.string == "at"} | {Token.string == "AT"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
)
:time1
(
 {Token.string == "and"} | {Token.string == "AND"}
)
(
 FOUR_DIGIT | 
 ((ONE_DIGIT|TWO_DIGIT)
  ({Token.string == ":"}|{Token.string == "-"}|{Token.string == "."}) TWO_DIGIT
 )
):time2
 -->
 :time1.TempTime = {kind = "positive", rule = "TimeDigitalContextConj"},

:time2.TempTime = {kind = "positive", rule = "TimeDigitalContextConj"}




//////////////////////////////////////////////////////////////////

// Date Rules


Rule: DateMilitary1
(
{Lookup.majorType == "month_num"}
{Lookup.majorType == "day_of_month"}
{Lookup.majorType == "year"}
):date
-->
:date.Date = {rule = "DateMilitary1"}

Rule:	DateSlash           // UK only
// Wed, 10/July/00
// 10/July
// July/99

(
 ((DAY_NAME (COMMA)? )?
 NUM_OR_ORDINAL SLASH MONTH_NAME (SLASH YEAR)? )|
 (MONTH_NAME SLASH YEAR) 
)
:date
-->
 :date.TempDate = {rule = "DateSlash"}



Rule:	DateDash
// Wed 10-July-00
// 10-July 00
// 10-July

(  
 ((DAY_NAME (COMMA)?)?
  (NUM_OR_ORDINAL DASH MONTH_NAME (DASH)? YEAR)) |

 ((DAY_NAME (COMMA)?)?
  NUM_OR_ORDINAL DASH MONTH_NAME)
)
:date
-->
 :date.TempDate = {rule = "DateDash"}



Rule: 	DateName
Priority: 20
// Wed 10 July
// Wed 10 July, 2000
// Sun, 21 May 2000
// 10th of July, 2000
// 10 July
// 10th of July
// July, 2000

(
 (DAY_NAME NUM_OR_ORDINAL MONTH_NAME)|

 (DAY_NAME (COMMA)? 
  NUM_OR_ORDINAL MONTH_NAME ((COMMA)? YEAR)?) 
|

 ((DAY_NAME (COMMA)? )?
 NUM_OR_ORDINAL MONTH_NAME 
 ((COMMA)? YEAR)?)
|

 (NUM_OR_ORDINAL MONTH_NAME) 
| 
(MONTH_NAME (COMMA)? YEAR)
)
:date
-->
 :date.TempDate = {rule = "DateName"}


Rule: DateNameSpan1
// 5-20 Jan

(
 NUM_OR_ORDINAL
 {Token.string == "-"}
 (NUM_OR_ORDINAL MONTH_NAME ((COMMA)?  YEAR)?)
)
:date
-->
 :date.TempDate = {rule = "DateNameSpan1"}

Rule: DateNameSpan2
// Jan 5-20

(MONTH_NAME

 NUM_OR_ORDINAL 
 {Token.string == "-"}
 (NUM_OR_ORDINAL ((COMMA)?  YEAR)?)
)
:date
-->
 :date.TempDate = {rule = "DateNameSpan2"}

Rule: DateNameRev
Priority: 10
// Wed. July 1st
// Wed, July 1
// Wed, July 1st
(         
 (DAY_NAME (COMMA)? )?
  MONTH_NAME  
  ({Token.string == "the"} | {Token.string == "THE"})?
 NUM_OR_ORDINAL 
)
:date
-->
 :date.TempDate = {rule = "DateNameRev"}
 
 Rule: DateNameRevFull
 Priority: 100
 // Wed. July 1st, 2000
 // Wed, July 1, 2000
 // Wed, July 1st, 2000
 (         
  (DAY_NAME (COMMA)? )?
   (MONTH_NAME):month
  ({Token.string == "the"} | {Token.string == "THE"})?
  (NUM_OR_ORDINAL):date
  (COMMA)?
  (YEAR):year
 )
 :cdate
 -->
 :cdate.TempDate = {rule = "DateNameRevFull"},
 {
 	 if (doc.getFeatures().get("docDate") == null) {
 	 	int start_offset=0;
		int end_offset = 0;
 	 	gate.AnnotationSet mon = (gate.AnnotationSet) bindings.get("month");
		gate.Annotation  Amon = (gate.Annotation)mon.iterator().next();
		start_offset = Amon.getStartNode().getOffset().intValue();
		end_offset = Amon.getEndNode().getOffset().intValue();
		String monthStr = doc.getContent().toString().substring(start_offset, end_offset);
		gate.AnnotationSet dat = (gate.AnnotationSet) bindings.get("date");
		gate.Annotation  Adat = (gate.Annotation)dat.iterator().next();
		start_offset = Adat.getStartNode().getOffset().intValue();
		end_offset = Adat.getEndNode().getOffset().intValue();
		String dayStr = doc.getContent().toString().substring(start_offset, end_offset);
		gate.AnnotationSet yea = (gate.AnnotationSet) bindings.get("year");
		gate.Annotation  Ayea = (gate.Annotation)yea.iterator().next();
		start_offset = Ayea.getStartNode().getOffset().intValue();
		end_offset = Ayea.getEndNode().getOffset().intValue();
		String yearStr = doc.getContent().toString().substring(start_offset, end_offset);
		SimpleDateFormat df2 = new SimpleDateFormat("MM dd yyyy");
		try {
			SimpleDateFormat df = new SimpleDateFormat("MMMM dd yyyy");
			Date dateX = df.parse(monthStr + " " + dayStr + " " + yearStr);
			doc.getFeatures().put("docDate",df2.format(dateX));
			//System.out.println(df2.format(dateX));
 		} catch (ParseException e) {
			try {
				SimpleDateFormat df = new SimpleDateFormat("MMM dd yyyy");
				Date dateX = df.parse(monthStr + " " + dayStr + " " + yearStr);
				doc.getFeatures().put("docDate",df2.format(dateX));
				//System.out.println(df2.format(dateX));

			} catch (ParseException f) {
				//System.out.println(f);
			}
		}
 	 }
}

Rule:	DateNumDashFull
// 01-07-00
// Note: not 07-00
  
(
 (DAY_MONTH_NUM) :month
 DASH 
 (DAY_MONTH_NUM) :date
 DASH 
 (YEAR):year
)
:cdate
 -->
 :cdate.TempDate = {rule = "DateNumDashFull"},
  {
  	 if (doc.getFeatures().get("docDate") == null) {
  	 	int start_offset=0;
 		int end_offset = 0;
  	 	gate.AnnotationSet mon = (gate.AnnotationSet) bindings.get("month");
 		gate.Annotation  Amon = (gate.Annotation)mon.iterator().next();
 		start_offset = Amon.getStartNode().getOffset().intValue();
 		end_offset = Amon.getEndNode().getOffset().intValue();
 		String monthStr = doc.getContent().toString().substring(start_offset, end_offset);
 		gate.AnnotationSet dat = (gate.AnnotationSet) bindings.get("date");
 		gate.Annotation  Adat = (gate.Annotation)dat.iterator().next();
 		start_offset = Adat.getStartNode().getOffset().intValue();
 		end_offset = Adat.getEndNode().getOffset().intValue();
 		String dayStr = doc.getContent().toString().substring(start_offset, end_offset);
 		gate.AnnotationSet yea = (gate.AnnotationSet) bindings.get("year");
 		gate.Annotation  Ayea = (gate.Annotation)yea.iterator().next();
 		start_offset = Ayea.getStartNode().getOffset().intValue();
 		end_offset = Ayea.getEndNode().getOffset().intValue();
 		String yearStr = doc.getContent().toString().substring(start_offset, end_offset);
 		//SimpleDateFormat df2 = new SimpleDateFormat("MM dd yyyy");
 		try {
 			SimpleDateFormat df = new SimpleDateFormat("MM dd yyyy");
 			Date dateX = df.parse(monthStr + " " + dayStr + " " + yearStr);
 			doc.getFeatures().put("docDate",df.format(dateX));
 			//System.out.println(df.format(dateX));
  		} catch (ParseException e) {
 			
 		}
  	 }
}

Rule:	DateNumDashRevFull
// 00-07-01
// 2000-07

(
 (YEAR):year 
 DASH 
 (DAY_MONTH_NUM) :month
 DASH 
 (DAY_MONTH_NUM) :date
)
:cdate
 -->
 :cdate.TempDate = {rule = "DateNumDashRevFull"},
   {
   	 if (doc.getFeatures().get("docDate") == null) {
   	 	int start_offset=0;
  		int end_offset = 0;
   	 	gate.AnnotationSet mon = (gate.AnnotationSet) bindings.get("month");
  		gate.Annotation  Amon = (gate.Annotation)mon.iterator().next();
  		start_offset = Amon.getStartNode().getOffset().intValue();
  		end_offset = Amon.getEndNode().getOffset().intValue();
  		String monthStr = doc.getContent().toString().substring(start_offset, end_offset);
  		gate.AnnotationSet dat = (gate.AnnotationSet) bindings.get("date");
  		gate.Annotation  Adat = (gate.Annotation)dat.iterator().next();
  		start_offset = Adat.getStartNode().getOffset().intValue();
  		end_offset = Adat.getEndNode().getOffset().intValue();
  		String dayStr = doc.getContent().toString().substring(start_offset, end_offset);
  		gate.AnnotationSet yea = (gate.AnnotationSet) bindings.get("year");
  		gate.Annotation  Ayea = (gate.Annotation)yea.iterator().next();
  		start_offset = Ayea.getStartNode().getOffset().intValue();
  		end_offset = Ayea.getEndNode().getOffset().intValue();
  		String yearStr = doc.getContent().toString().substring(start_offset, end_offset);
  		//SimpleDateFormat df2 = new SimpleDateFormat("MM dd yyyy");
  		try {
  			SimpleDateFormat df = new SimpleDateFormat("MM dd yyyy");
  			Date dateX = df.parse(monthStr + " " + dayStr + " " + yearStr);
  			doc.getFeatures().put("docDate",df.format(dateX));
  			//System.out.println(df.format(dateX));
   		} catch (ParseException e) {
  			
  		}
   	 }
}



Rule:	DateNumSlashFull
// 01/07/00
// Note: not 07/00

( 
(DAY_MONTH_NUM) :date
SLASH
(DAY_MONTH_NUM) :month 
SLASH
(YEAR):year
)
:cdate
 -->
 :cdate.TempDate = {rule = "DateNumSlashFull"},
    {
    	 if (doc.getFeatures().get("docDate") == null) {
    	 	int start_offset=0;
   		int end_offset = 0;
    	 	gate.AnnotationSet mon = (gate.AnnotationSet) bindings.get("month");
   		gate.Annotation  Amon = (gate.Annotation)mon.iterator().next();
   		start_offset = Amon.getStartNode().getOffset().intValue();
   		end_offset = Amon.getEndNode().getOffset().intValue();
   		String monthStr = doc.getContent().toString().substring(start_offset, end_offset);
   		gate.AnnotationSet dat = (gate.AnnotationSet) bindings.get("date");
   		gate.Annotation  Adat = (gate.Annotation)dat.iterator().next();
   		start_offset = Adat.getStartNode().getOffset().intValue();
   		end_offset = Adat.getEndNode().getOffset().intValue();
   		String dayStr = doc.getContent().toString().substring(start_offset, end_offset);
   		gate.AnnotationSet yea = (gate.AnnotationSet) bindings.get("year");
   		gate.Annotation  Ayea = (gate.Annotation)yea.iterator().next();
   		start_offset = Ayea.getStartNode().getOffset().intValue();
   		end_offset = Ayea.getEndNode().getOffset().intValue();
   		String yearStr = doc.getContent().toString().substring(start_offset, end_offset);
   		//SimpleDateFormat df2 = new SimpleDateFormat("MM dd yyyy");
   		try {
   			SimpleDateFormat df = new SimpleDateFormat("MM dd yyyy");
   			Date dateX = df.parse(monthStr + " " + dayStr + " " + yearStr);
   			doc.getFeatures().put("docDate",df.format(dateX));
   			//System.out.println(df.format(dateX));
    		} catch (ParseException e) {
   			
   		}
    	 }
}


Rule: ModifierMonth
//early October

( DATE_PRE 
  {Lookup.minorType == month}
)
:date -->
 :date.TempDate = {rule = "ModifierMonth"}


Rule: YearAdBc

// 1900 AD
(
 (YEAR 
  AD_BC)
)
:year -->
 :year.YearTemp = {kind = "positive", rule = "YearAdBc"}

Rule: YearSpan1
// the early 90s
// the late 80s
(
 ({Token.string == "the"} | {Token.string == "THE"})
 (DATE_PRE)?
 (YEAR)
 ({Token.string == "'"})?
 ({Token.string == "s"} | {Token.string == "S"})
)
:date -->
 :date.TempDate = {rule = "YearSpan1"}

Rule: YearSpan2
// 1980/81

(
 (FOUR_DIGIT)
 ({Token.string == "/"}|
  {Token.string == "-"})
 (FOUR_DIGIT|TWO_DIGIT | ONE_DIGIT)
)
:date -->
 :date.TempDate = {rule = "YearSpan2"}

Rule: YearSpan3
Priority: 80

// from 1980 to 1981
// between 1980 and 1981
(
 (({Token.string == "from"}| {Token.string == "From"}| {Token.string == "FROM"})
  (FOUR_DIGIT)
  ({Token.string == "to"}| {Token.string == "TO"})
  (FOUR_DIGIT)
 ) |
  (({Token.string == "between"}|{Token.string == "Between"}|{Token.string == "BETWEEN"}) 
  (FOUR_DIGIT)
  ({Token.string == "and"} |{Token.string == "AND"})
  (FOUR_DIGIT)
 )
)
:date -->
 :date.TempDate = {rule = "YearSpan3"}


Rule: YearContext1
Priority: 40
({Token.string == "in"}|
{Token.string == "IN"}|
{Token.string == "by"}|
 {Token.string == "BY"}
)
(YEAR)
:date -->
 :date.TempDate = {rule = "YearContext1"}


// Currently, temp1, temp2 and temp3 look good; temp4 is not to be counted
// but this may change according to the text
// only positives will be used in final grammar, not negatives

Rule: YearTemp1
Priority: 30
// (1987)

({Token.position == startpunct})
(FOUR_DIGIT)
:date
({Token.position == endpunct})
 -->
 :date.TempYear = {kind = "positive", rule = "TempYear1"}


Rule: TempYear2
Priority: 20
// 1987

(
 {Lookup.majorType == year}
)
:date -->
 :date.TempYear = {kind = "positive", rule = "TempYear2"}


Rule: TempYear3
Priority: 10
// 1922

(FOUR_DIGIT)
:date -->
 :date.TempYear = {kind = "positive", rule = "TempYear3"}


Rule: YearWords
// nineteen twenty three
// nineteen ten

(
 ({Token.string == "nineteen"}| {Token.string == "NINETEEN"})
 ({Lookup.majorType == number}
 )?
 {Lookup.majorType == number}
)
 :date -->
 :date.TempYear = {kind = "positive", rule = "YearWords"}



Rule: TimeZone
// +0400
(
 (TIME_DIFF)
 (TIME_ZONE)?
)
:date
-->
 :date.TempZone = {rule = "TimeZone"}