/*
*
* Copyright (c) 2012, Jeffrey D. Mershon.
*
*  This is free software, licensed under GPL v3.
* 
*/

Phase:	NameContext2
Input:  Token Person Split Lookup CoreName
Options: control = appelt


Rule: akaPerson
(
	({Person})
	({Token.string == ","})?
	({Token.string == "aka"}|{Token.string == "AKA"})
	({CoreName, Token.string != "AKA"})+:person
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "akaPerson");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: akaPerson2
(
	({Person})
	({Token.string == ","})?
	({Token.string == "also"}|{Token.string == "ALSO"})
	({Token.string == "known"}|{Token.string == "KNOWN"})
	({Token.string == "as"}|{Token.string == "AS"})
	({CoreName})+:person
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "akaPerson2");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: akaPerson3
(
	({CoreName})+:person
	({Token.string == ","})?
	({Token.string == "aka"}|{Token.string == "AKA"})
	({Person})
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "akaPerson");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: akaPerson4
(
	({CoreName})+:person
	({Token.string == ","})?
	({Token.string == "also"}|{Token.string == "ALSO"})
	({Token.string == "known"}|{Token.string == "KNOWN"})
	({Token.string == "as"}|{Token.string == "AS"})
	({Person})
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "akaPerson2");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: PersonandCoreName
(
	{Person}
	({Token.string == "and"}|{Token.string == "AND"})
	({CoreName})+ :person
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "PersonandCoreName");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: CoreNameandPerson
(
	({CoreName})+ :person
	({Token.string == "and"}|{Token.string == "AND"})
	{Person}
)
-->
{
//removes old "CoreName" annotation and adds a "Person" one
gate.AnnotationSet person = (gate.AnnotationSet) bindings.get("person");
gate.FeatureMap features = Factory.newFeatureMap();
features.put("rule", "CoreNameandPerson");
outputAS.add(person.firstNode(), person.lastNode(), "Person",features);
outputAS.removeAll(person);
}

Rule: ExpandPerson
(
	({CoreName, Token.string != "AKA"})+ :nuke1
	(
		({Token.length == 1, Token.kind != "punctuation"})
		({Token.string == "."})?
	)?
	({Person}):nuke2
):person
-->
{
gate.FeatureMap features = Factory.newFeatureMap();
gate.AnnotationSet personAS = (gate.AnnotationSet)bindings.get("person");
//gate.Annotation personAnn = (gate.Annotation)personAS.iterator().next();
gate.AnnotationSet nukeAS = (gate.AnnotationSet)bindings.get("nuke2");
if (nukeAS != null) {
	gate.Annotation nukeAnn = (gate.Annotation)nukeAS.iterator().next();
	if (nukeAnn.getFeatures().get("rule") != null) {
		features.put("rule", nukeAnn.getFeatures().get("rule"));
	}
	if (nukeAnn.getFeatures().get("weight") != null) {
		features.put("weight", nukeAnn.getFeatures().get("weight"));
	}
	outputAS.removeAll(nukeAS);
}
features.put("rule1", "ExpandPerson");
outputAS.add(personAS.firstNode(), personAS.lastNode(), "Person", features);
outputAS.removeAll(personAS);
nukeAS = (gate.AnnotationSet)bindings.get("nuke1");
if (nukeAS != null) {
	outputAS.removeAll(nukeAS);
}
}

Rule: ExpandPerson2
(
	({Person})+ :nuke1
	{Lookup.majorType == "surnameprefix"}
	({Token.string == "-"}|{Token.string == "'"}|{Token.string == "’"})?
	({CoreName, Token.string != "AKA"})+:nuke2
):person
-->
{
gate.FeatureMap features = Factory.newFeatureMap();
gate.AnnotationSet personAS = (gate.AnnotationSet)bindings.get("person");
//gate.Annotation personAnn = (gate.Annotation)personAS.iterator().next();
gate.AnnotationSet nukeAS = (gate.AnnotationSet)bindings.get("nuke2");
if (nukeAS != null) {
	gate.Annotation nukeAnn = (gate.Annotation)nukeAS.iterator().next();
	if (nukeAnn.getFeatures().get("rule") != null) {
		features.put("rule", nukeAnn.getFeatures().get("rule"));
	}
	if (nukeAnn.getFeatures().get("weight") != null) {
		features.put("weight", nukeAnn.getFeatures().get("weight"));
	}
	outputAS.removeAll(nukeAS);
}
features.put("rule1", "ExpandPerson");
outputAS.add(personAS.firstNode(), personAS.lastNode(), "Person", features);
outputAS.removeAll(personAS);
nukeAS = (gate.AnnotationSet)bindings.get("nuke1");
if (nukeAS != null) {
	outputAS.removeAll(nukeAS);
}
}

Rule: ExpandPerson3
(
	({Person})+ :nuke1
	{Lookup.majorType == "surnameprefix"}
	({Token.string == "-"}|{Token.string == "'"}|{Token.string == "’"})?
	({Person})+:nuke2
):person
-->
{
gate.FeatureMap features = Factory.newFeatureMap();
gate.AnnotationSet personAS = (gate.AnnotationSet)bindings.get("person");
//gate.Annotation personAnn = (gate.Annotation)personAS.iterator().next();
gate.AnnotationSet nukeAS = (gate.AnnotationSet)bindings.get("nuke2");
if (nukeAS != null) {
	gate.Annotation nukeAnn = (gate.Annotation)nukeAS.iterator().next();
	if (nukeAnn.getFeatures().get("rule") != null) {
		features.put("rule", nukeAnn.getFeatures().get("rule"));
	}
	if (nukeAnn.getFeatures().get("weight") != null) {
		features.put("weight", nukeAnn.getFeatures().get("weight"));
	}
	outputAS.removeAll(nukeAS);
}
features.put("rule1", "ExpandPerson");
outputAS.add(personAS.firstNode(), personAS.lastNode(), "Person", features);
outputAS.removeAll(personAS);
nukeAS = (gate.AnnotationSet)bindings.get("nuke1");
if (nukeAS != null) {
	outputAS.removeAll(nukeAS);
}
}

Rule: ExpandPersonApostrophe1
//Sa'ed moving from left to right
(
	({Person})+ :nuke1
	({Token.string == "'"}|{Token.string == "’"})
	{Token.length > 1}
):person
-->
{
gate.FeatureMap features = Factory.newFeatureMap();
gate.AnnotationSet personAS = (gate.AnnotationSet)bindings.get("person");
//gate.Annotation personAnn = (gate.Annotation)personAS.iterator().next();
gate.AnnotationSet nukeAS = (gate.AnnotationSet)bindings.get("nuke1");
if (nukeAS != null) {
	gate.Annotation nukeAnn = (gate.Annotation)nukeAS.iterator().next();
	if (nukeAnn.getFeatures().get("rule") != null) {
		features.put("rule", nukeAnn.getFeatures().get("rule"));
	}
	if (nukeAnn.getFeatures().get("weight") != null) {
		features.put("weight", nukeAnn.getFeatures().get("weight"));
	}
	outputAS.removeAll(nukeAS);
}
features.put("rule1", "ExpandPersonApostrophe1");
outputAS.add(personAS.firstNode(), personAS.lastNode(), "Person", features);
outputAS.removeAll(personAS);
}

Rule: ExpandPersonApostrophe2
//Sa'ed but moving from right to left
(
	{Token.length > 1}
	({Token.string == "'"}|{Token.string == "’"})
	({Person})+ :nuke1
):person
-->
{
gate.FeatureMap features = Factory.newFeatureMap();
gate.AnnotationSet personAS = (gate.AnnotationSet)bindings.get("person");
//gate.Annotation personAnn = (gate.Annotation)personAS.iterator().next();
gate.AnnotationSet nukeAS = (gate.AnnotationSet)bindings.get("nuke1");
if (nukeAS != null) {
	gate.Annotation nukeAnn = (gate.Annotation)nukeAS.iterator().next();
	if (nukeAnn.getFeatures().get("rule") != null) {
		features.put("rule", nukeAnn.getFeatures().get("rule"));
	}
	if (nukeAnn.getFeatures().get("weight") != null) {
		features.put("weight", nukeAnn.getFeatures().get("weight"));
	}
	outputAS.removeAll(nukeAS);
}
features.put("rule1", "ExpandPersonApostrophe2");
outputAS.add(personAS.firstNode(), personAS.lastNode(), "Person", features);
outputAS.removeAll(personAS);
}